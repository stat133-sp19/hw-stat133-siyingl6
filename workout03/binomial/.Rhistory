library(testthat)
library(binomial)
test_check("binomial")
getwd()
setwd("~/Desktop/berkeley/academic/stat133/workout/workout03/binomial")
library(testthat)
library(binomial)
test_check("binomial")
# =====================================================
# Devtools workflow
library(devtools)
# =====================================================
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
library("FRACTION")
# =====================================================
# Devtools workflow
library(devtools)
# =====================================================
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
# =====================================================
# Devtools workflow
library(devtools)
# =====================================================
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
aux_mode(3,0.95)
typeof(ux_mode(3,0.95))
typeof(aux_mode(3,0.95))
class(aux_mode(3,0.95))
class(aux_mode(2,0.5))
class(aux_mode(2,1))
aux_mode(1, 0.5)
typeof(aux_mode(1, 0.5))
class(aux_mode(1, 0.5))
aux_mode(1, 0.5)
aux_mode(3, 0.95)
typeof(aux_mode(3, 0.95))
class(aux_mode(3, 0.95))
expect_is(aux_mode(1, 0.5), "numeric")
expect_is(aux_mode(3, 0.95), "integer")
expect_type(aux_mode(1, 0.5), "double")
expect_type(aux_mode(3, 0.95), "integer")
# =====================================================
# Devtools workflow
library(devtools)
# =====================================================
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
?binomial
package(binomial)
help(binomial)
success <- c(1, 2, 3)
all(is.wholenumber(success))
all(success %% 1)
all(success %% 1 == 1)
all(success %% 1 == 0)
aux_mode <- function(trials, prob){
m <- trials * prob + prob
mode <- length(integer(m))
if(m %% 1 == 0){
mode <- c(mode, mode -1)
}else{
mode <- mode
}
return(mode)
}
aux_mode(3, 0.5)
aux_mode(2, 0.5)
round(3.5)
length(3.5)
integer(3.5)
length(integer(3.5))
bin_probability(success = 2, trials = 5, prob = 0.5)
bin_probability(success = 0:2, trials = 5, prob = 0.5)
bin_probability(success = 55, trials = 100, prob = 0.45)
bin_distribution <- function(trials, prob){
success <- seq(0, trials, by = 1)
probability <- c(0, rep = trials+1)
for (i in success){
probability[i+1] <- bin_probability(i, trials, prob)
}
distribution <- data.frame(success = success, probability = probability)
class(distribution) <- c("bindis", "data.frame")
return(distribution)
}
bin_distribution(trials = 5, prob = 0.5)
bin1 <- bin_distribution(trials = 5, prob = 0.5)
class(bin1)
plot(bin1)
bin_cumulative(trials = 5, prob = 0.5)
dis2 <- bin_cumulative(trials = 5, prob = 0.5)
plot(dis2)
class(bin1)
class(dis2)
bin_variable(trials = 10, p = 0.3)
bin1 <- bin_variable(trials = 10, p = 0.3) bin1
bin1 <- bin_variable(trials = 10, p = 0.3)
bin1
# =====================================================
# Devtools workflow
library(devtools)
# =====================================================
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
library(binomial)
summary.binvar <- function(x, ...){
summary <- data.frame(
trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials, x$prob),
variance = aux_variance(x$trials, x$prob),
mode = aux_mode(x$trials, x$prob),
skewness = aux_skewness(x$trials, x$prob),
kurtosis = aux_kurtosis(x$trials, x$prob)
)
class(summary) <- "summary.binvar"
summary
}
bin1 <- bin_variable(trials = 10, p = 0.3)
binsum1 <- summary(bin1)
binsum1
# =====================================================
# Devtools workflow
library(devtools)
# =====================================================
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
# =====================================================
# Devtools workflow
library(devtools)
# =====================================================
devtools::document()          # generate documentation
devtools::check_man()         # check documentation
devtools::test()              # run tests
devtools::build_vignettes()   # build vignettes
devtools::build()             # build bundle
devtools::install()           # install package
---
output:
github_document:
html_preview: false
---
<!-- README.md is generated from README.Rmd. Please edit that file -->
```{r, echo = FALSE}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "README-"
)
```
## Overview
The package `"binomial"` is a [R](http://www.r-project.org/) package
that provides function of a binomial distribution.
* `bin_choose()` generates the number of combinations in which k successes can occur in n trials.
* `bin_probability()` generates the probability of getting k successes in n trials.
* `bin_distribution()` generates the probability distribution of getting different number of successes in n trials.
* `plot.bindis()` function gives you a `plot()` method which generates a barplot to display the probability histogram of a binomial distribution object "bindis".
* `bin_cumulative()` generates the cumulative distribution of getting different number of successes in n trials.
* `plot.bincum()` method for a "bincum" object.
* `bin_variable()` generates the variables of a binomial distribution.
* `print.binvar()` method for a "binvar" object.
* `summary.binvar()` method for a "binvar" object.
* `print.summary.binvar()` method for a "summary.binvar" object.
* `bin_mean()` generates the expected value or mean for a binomial distribution
* `bin_variance()` generates the variance for a binomial distribution.
* `bin_mode()` generates the mode for a binomial distribution,
* `bin_skewness()` generates the skewness for a binomial distribution
* `bin_kurtosis()` generates the kurtosis for a binomial distribution
## Motivation
This package has been developed to illustrate some of the concepts
behind the creation of an R package.
## Installation
Install the development version from GitHub via the package `"devtools"`:
```{r}
# development version from GitHub:
# install.packages("devtools")
# install "binomial" (without vignettes)
devtools::install_github("siyingl6/binomial")
# install "binomial" (with vignettes)
devtools::install_github("siyingl6/binomial", build_vignettes = TRUE)
```
## Usage
```{r}
library(binomial)
# number of combination
num_combination <- bin_choose(n = 5, k = 2)
num_combination
# probability
prob <- bin_probability(success = 2, trials = 5, prob = 0.5)
prob
# probability distribution
prob_dis <- bin_distribution(trials = 5, prob = 0.5)
prob_dis
# barplot of probability distribution
plot(prob_dis)
# cumulative distribution
cum_dis <- bin_cumulative(trials = 5, prob = 0.5)
cum_dis
# scatter plot of cumulative distribution
plot(cum_dis)
# variables
bin_var <- bin_variable(trials = 10, p = 0.3)
bin_var
# summary measures of the binomial distribution
binsum1 <- summary(bin_var)
binsum1
# mean
mean <- bin_mean(10, 0.3)
mean
# variance
variance <- bin_variance(10, 0.3)
variance
# mode
mode <- bin_mode(10, 0.3)
mode
# skewness
skewness <- bin_skewness(10, 0.3)
skewness
# kurtosis
kurtosis <- bin_kurtosis(10, 0.3)
kurtosis
```
