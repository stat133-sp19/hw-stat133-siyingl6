variance <- function(x, type = "sample"){
n <- length
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
if (type == "sample"){
xvar <- std_dev/(n-1)
}else if (type == "population"){
xvar <- std_dev/n
}else{
stop("type must be either sample or population")
}
return(xvar)
}
variance <- function(x, type = "sample"){
n <- length(x)
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
type_match <- match.arg(type, ("sample", "population"))
variance <- function(x, type = "sample"){
n <- length
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
if (type == "sample"){
xvar <- std_dev/(n-1)
}else if (type == "population"){
xvar <- std_dev/n
}else{
stop("type must be either sample or population")
}
return(xvar)
}
variance <- function(x, type = "sample"){
n <- length(x)
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
type_match <- match.arg(type, c("sample", "population"))
xvar <- switch(type_match,
sample = std_dev / (n-1),
population = std_dev / n)
return(xvar)
}
x <- c(2,3,4,5,2,3,3)
variance(x)
variance <- function(x, type = "sample"){
n <- length
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
if (type == "sample"){
xvar <- std_dev/(n-1)
}else if (type == "population"){
xvar <- std_dev/n
}else{
stop("type must be either sample or population")
}
return(xvar)
}
variance <- function(x, type = "sample"){
n <- length(x)
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
type_match <- match.arg(type, c("sample", "population"))
xvar <- switch(type_match,
sample = std_dev / (n-1),
population = std_dev / n)
return(xvar)
}
# What
x <- c(2,3,4,5,2,3,3)
variance(x)
y <- c(2,3,4,5,2,3,3)
variance(y,"sam")
variance <- function(x, type = "sample"){
n <- length
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
if (type == "sample"){
xvar <- std_dev/(n-1)
}else if (type == "population"){
xvar <- std_dev/n
}else{
stop("type must be either sample or population")
}
return(xvar)
}
variance <- function(x, type = "sample"){
n <- length(x)
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
type_match <- match.arg(type, c("sample", "population"))
xvar <- switch(type_match,
sample = std_dev / (n-1),
population = std_dev / n)
return(xvar)
}
x <- c(2,3,4,5,2,3,3)
variance(x)
y <- c(2,3,4,5,2,3,3)
variance(y,"s")
variance <- function(x, type = "sample"){
n <- length
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
if (type == "sample"){
xvar <- std_dev/(n-1)
}else if (type == "population"){
xvar <- std_dev/n
}else{
stop("type must be either sample or population")
}
return(xvar)
}
variance <- function(x, type = "sample"){
n <- length(x)
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
type_match <- match.arg(type, c("sample", "population"))
xvar <- switch(type_match,
sample = std_dev / (n-1),
population = std_dev / n)
return(xvar)
}
x <- c(2,3,4,5,2,3,3)
variance(x)
y <- c(2,3,4,5,2,3,3)
variance(y,"p"")
variance <- function(x, type = "sample"){
n <- length
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
if (type == "sample"){
xvar <- std_dev/(n-1)
}else if (type == "population"){
xvar <- std_dev/n
}else{
stop("type must be either sample or population")
}
return(xvar)
}
variance <- function(x, type = "sample"){
n <- length(x)
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
type_match <- match.arg(type, c("sample", "population"))
xvar <- switch(type_match,
sample = std_dev / (n-1),
population = std_dev / n)
return(xvar)
}
x <- c(2,3,4,5,2,3,3)
variance(x)
y <- c(2,3,4,5,2,3,3)
variance(y,"p")
variance <- function(x, type = "sample"){
n <- length
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
if (type == "sample"){
xvar <- std_dev/(n-1)
}else if (type == "population"){
xvar <- std_dev/n
}else{
stop("type must be either sample or population")
}
return(xvar)
}
variance <- function(x, type = "sample"){
n <- length(x)
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
type_match <- match.arg(type, c("sample", "population"))
xvar <- switch(type_match,
sample = std_dev / (n-1),
population = std_dev / n)
return(xvar)
}
x <- c(2,3,4,5,2,3,3)
variance(x)
y <- c(2,3,4,5,2,3,3)
variance(y,"e")
variance <- function(x, type = "sample"){
n <- length
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
if (type == "sample"){
xvar <- std_dev/(n-1)
}else if (type == "population"){
xvar <- std_dev/n
}else{
stop("type must be either sample or population")
}
return(xvar)
}
variance <- function(x, type = "sample"){
n <- length(x)
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
type_match <- match.arg(type, c("sample", "population"))
xvar <- switch(type_match,
sample = std_dev / (n-1),
population = std_dev / n)
return(xvar)
}
x <- c(2,3,4,5,2,3,3)
variance(x)
y <- c(2,3,4,5,2,3,3)
variance(y,"ple")
variance <- function(x, type = "sample"){
n <- length
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
if (type == "sample"){
xvar <- std_dev/(n-1)
}else if (type == "population"){
xvar <- std_dev/n
}else{
stop("type must be either sample or population")
}
return(xvar)
}
variance <- function(x, type = "sample"){
n <- length(x)
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
type_match <- match.arg(type, c("sample", "population"))
xvar <- switch(type_match,
sample = std_dev / (n-1),
population = std_dev / n)
return(xvar)
}
x <- c(2,3,4,5,2,3,3)
variance(x)
y <- c(2,3,4,5,2,3,3)
variance(y,"a")
variance <- function(x, type = "sample"){
n <- length
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
if (type == "sample"){
xvar <- std_dev/(n-1)
}else if (type == "population"){
xvar <- std_dev/n
}else{
stop("type must be either sample or population")
}
return(xvar)
}
variance <- function(x, type = "sample"){
n <- length(x)
xmean <- sum(x)/n
std_dev <- sum((x-xmean)^2)
type_match <- match.arg(type, c("sample", "population"))
xvar <- switch(type_match,
sample = std_dev / (n-1),
population = std_dev / n)
return(xvar)
}
x <- c(2,3,4,5,2,3,3)
variance(x)
y <- c(2,3,4,5,2,3,3)
variance(y,"p")
# About R expressions
a =1 ; 2+2 ; 3*3
a
# About R expressions
a =1 ; 2+2 ; 3*3;
a
# About R expressions
a =1; 2+2 ; 3*3;
a
# About R expressions
a =1; 2+2 ; 3*3;  # compound expression in R
a
{a =1; 2+2 ; 3*3}
a
a =1; 2+2 ; 3*3;
{a =1; 2+2 ; 3*3}
# About R expressions
a =1; 2+2 ; 3*3;  # compound expression in R
a
{a =1; 2+2 ; 3*3}
a
{
a = 1
b = 2 + 2
c = 3 * 3
}
fun
fun(1)
# About R expressions
a =1; 2+2 ; 3*3;  # compound expression in R
a
{a =1; 2+2 ; 3*3}
a
fun <- function(x){
a = 1
b = 2 + 2
c = 3 * 3
}
ls()
a
b
c
# About R expressions
a =1; 2+2 ; 3*3;  # compound expression in R
a
{a =1; 2+2 ; 3*3}
a
fun <- function(x){
a = 1
b = 2 + 2
c = 3 * 3
}
ls()
fun_1 <- function(x){
a = 1
b = 2 + 2
3 * 3
}
ls()
a
b
c
# About R expressions
a =1; 2+2 ; 3*3;  # compound expression in R
a
{a =1; 2+2 ; 3*3}
a
#fun <- function(x){
a = 1
b = 2 + 2
c = 3 * 3
}
# What if X has NAs?
x = c(1,2,3,4,NA)
variance <- function(x, type = "sample", na.rm = FALSE){
if (na.rm == FALSE){
x <- x[!is.na(x)]
n <- length(x)
mean <- sum(x)/n
}
}
#is.na(x) returns TRUE if is na, return FALSE if not na
# What if Xis not a numerical vector?
variance <- function(x, type = "sample", na.rm = FALSE){
if (is.vector(x) & mode(x) == "numeric"){
n <- length(x)
mean <- sum(x)/n
}else{
stop("must be a numberic vector"")
}
}
#calss(x) replaced by is.vector function
# About R expressions
a =1; 2+2 ; 3*3;  # compound expression in R
a
{a =1; 2+2 ; 3*3}
a
#fun <- function(x){
#  a = 1
#  b = 2 + 2
#  c = 3 * 3
#}
ls()
fun_1 <- function(x){
a = 1
b = 2 + 2
3 * 3
}
ls()
fun_1
# About R expressions
a =1; 2+2 ; 3*3;  # compound expression in R
a
{a =1; 2+2 ; 3*3}
a
#fun <- function(x){
#  a = 1
#  b = 2 + 2
#  c = 3 * 3
#}
ls()
fun_1 <- function(x){
a = 1
b = 2 + 2
3 * 3
}
ls()
d <- function(x){
a = 1
b = 2 + 2
}
d
a
b
d
d()
fun_1
fun_1 <- function(x){
a = 1
b = 2 + 2
3 * 3
}
ls()
fun_1
ls()
fun_1()
d
d()
d
ls()
d
d()
# About R expressions
a =1; 2+2 ; 3*3;  # compound expression in R
a
{a =1; 2+2 ; 3*3}
a
#fun <- function(x){
#  a = 1
#  b = 2 + 2
#  c = 3 * 3
#}
ls()
fun_1 <- function(x){
a = 1
b = 2 + 2
3 * 3
}
ls()
fun_1()
d <- function(x){
a = 1
2 + 2
}
d
d()
# About R expressions
a =1; 2+2 ; 3*3;  # compound expression in R
a
{a =1; 2+2 ; 3*3}
a
fun <- function(x){
a = 1
b = 2 + 2
c = 3 * 3
}
ls()
fun_1 <- function(x){
a = 1
b = 2 + 2
3 * 3
}
ls()
fun_1()
d <- function(x){
a = 1
2 + 2
}
# no return, return the last value(which is not assigned to any other value)
variance <- function(x, type = "sample",na.rm = FALSE){
n <- length(x)
xmean <- sum(x) / n
sum((x-xmean)^2) / (n-1)
}
variance()
variance(c(1,2,3,NA))
variance(c(1,2,3))
variance(c(1,2,3,4,5))
setwd("~/Desktop/hw-stat133/workout01/code")
knitr::include_graphics('../images/gsw-shot-charts')
library(dplyr)
# 5.1) Effective Shooting Percentage
shots_data <- read.csv(file="../data/shots-data.csv")
# Table 1: 2PT Effective Shooting % by Player
effective_shooting_2pt <- arrange(summarise(group_by(filter(shots_data, shot_type == "2PT Field Goal"), name), total = n(), made = sum(shot_made_flag == "shot_yes"), percentage = made / total), desc(percentage))
effective_shooting_2pt
# Table 2: 3PT Effective Shooting % by Player
effective_shooting_3pt <- arrange(summarise(group_by(filter(shots_data, shot_type == "3PT Field Goal"), name), total = n(), made = sum(shot_made_flag == "shot_yes"), percentage = made / total), desc(percentage))
effective_shooting_3pt
# Table 3: Effective Shooting % by Player
effective_shooting <- arrange(summarise(group_by(shots_data, name), total = n(), made = sum(shot_made_flag == "shot_yes"), percentage = made / total), desc(percentage))
effective_shooting
knitr::include_graphics('/Desktop/GSW BIG FIVE.jpg')
knitr::include_graphics('../images/gsw-shot-charts.png')
effective_shooting
effective_shooting_2pt
effective_shooting_3pt
knitr::include_graphics('Desktop/Kevin Durant.jpg')
knitr::include_graphics('Desktop/Stephen Curry.jpg')
knitr::include_graphics('Desktop/Klay Thompson.jpg')
knitr::include_graphics('Desktop/Andre Iguodala.jpg')
knitr::include_graphics('Desktop/Draymond Green.jpg')
knitr::include_graphics('Desktop/Kevin Durant.jpg')
knitr::include_graphics('../images/gsw-shot-charts.png')
library(dplyr)
# 5.1) Effective Shooting Percentage
shots_data <- read.csv(file="../data/shots-data.csv")
# Table 1: 2PT Effective Shooting % by Player
effective_shooting_2pt <- arrange(summarise(group_by(filter(shots_data, shot_type == "2PT Field Goal"), name), total = n(), made = sum(shot_made_flag == "shot_yes"), percentage = made / total), desc(percentage))
effective_shooting_2pt
# Table 2: 3PT Effective Shooting % by Player
effective_shooting_3pt <- arrange(summarise(group_by(filter(shots_data, shot_type == "3PT Field Goal"), name), total = n(), made = sum(shot_made_flag == "shot_yes"), percentage = made / total), desc(percentage))
effective_shooting_3pt
# Table 3: Effective Shooting % by Player
effective_shooting <- arrange(summarise(group_by(shots_data, name), total = n(), made = sum(shot_made_flag == "shot_yes"), percentage = made / total), desc(percentage))
effective_shooting
knitr::include_graphics('/Desktop/GSW BIG FIVE.jpg')
knitr::include_graphics('Desktop/GSW BIG FIVE.jpg')
knitr::include_graphics('/Desktop/Kevin Durant.jpg')
knitr::include_graphics('Desktop/Stephen Curry.jpg')
knitr::include_graphics('../images/Klay Thompson.jpg')
knitr::include_graphics('../images/Andre Iguodala.jpg')
